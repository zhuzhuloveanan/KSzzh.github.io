{"posts":[{"title":"JAVA实验","text":"JAVA实验准备前提:一、下载MySql数据库参考文章： $文章一$ $文章二$ $文章三$ 二、JAVA与MySql连接参考文章： $文章$ 三、VsCode建立Maven项目参考视频： $视频$ 四、利用github pages搭建博客参考文章： $文章$ JAVA实验代码实现功能：一、进行MySql数据库连接:可以直接通过Maven Central导入相应的数据库连接依赖。 代码： 123456789101112131415161718192021222324252627public void connect() { // url为个人数据库地址 String url = &quot;jdbc:mysql://localhost:3306/Teaching1&quot;; // username为数据库用户名 String username = &quot;root&quot;; // password为自定义的密码 String password = &quot;jzgs.yxwm&quot;; try { // 需加入mysql数据库连接依赖 connection = DriverManager.getConnection(url, username, password); System.out.println(&quot;Connected to the database.&quot;); } catch (SQLException e) { e.printStackTrace(); } } public void disconnect() { try { if (connection != null &amp;&amp; !connection.isClosed()) { connection.close(); System.out.println(&quot;Disconnected from the database.&quot;); } } catch (SQLException e) { e.printStackTrace(); } } 二、使用GUI界面：这是实现起来最容易的部分 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107public StudentGradeManagement() { setTitle(&quot;学生成绩管理系统&quot;); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(500, 500); init(); setVisible(true); } public void init() { JPanel panel = new JPanel(); // 设置布局为网格布局 panel.setLayout(new GridLayout(10, 10, 10, 10)); // 添加相应的标签 panel.add(new JLabel(&quot;学号：&quot;)); textFieldStudentId = new JTextField(); panel.add(textFieldStudentId); panel.add(new JLabel(&quot;姓名&quot;)); textFieldName = new JTextField(); panel.add(textFieldName); panel.add(new JLabel(&quot;性别&quot;)); textFieldGender = new JTextField(); panel.add(textFieldGender); panel.add(new JLabel(&quot;出生日期&quot;)); textFieldBirthdate = new JTextField(); panel.add(textFieldBirthdate); panel.add(new JLabel(&quot;课程名&quot;)); textFieldCourse = new JTextField(); panel.add(textFieldCourse); panel.add(new JLabel(&quot;成绩&quot;)); textFieldGrade = new JTextField(); panel.add(textFieldGrade); // 添加相应的按钮，利用匿名类为按钮添加监视器 JButton buttonAddStudent = new JButton(&quot;添加学生&quot;); buttonAddStudent.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { addStudent(textFieldName.getText().trim(), textFieldGender.getText().trim(), textFieldBirthdate.getText().trim()); } }); panel.add(buttonAddStudent); JButton buttonAddStudentGrade = new JButton(&quot;添加学生成绩&quot;); buttonAddStudentGrade.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { addStudentGrade(Integer.parseInt(textFieldStudentId.getText().trim()), textFieldCourse.getText().trim(), Integer.parseInt(textFieldGrade.getText().trim())); } }); panel.add(buttonAddStudentGrade); getContentPane().add(panel, BorderLayout.NORTH); textAreaResult = new JTextArea(); // 设置为不可被编辑 textAreaResult.setEditable(false); getContentPane().add(new JScrollPane(textAreaResult), BorderLayout.CENTER); JButton buttonsearchStudentById = new JButton(&quot;通过学号查找学生&quot;); buttonsearchStudentById.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { searchStudentById(Integer.parseInt(textFieldStudentId.getText().trim())); } }); panel.add(buttonsearchStudentById); JButton buttonsearchStudentByName = new JButton(&quot;通过姓名查找学生&quot;); buttonsearchStudentByName.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { searchStudentByName(textFieldName.getText().trim()); } }); panel.add(buttonsearchStudentByName); JButton buttonGenerateReport = new JButton(&quot;生成学生学习情况报表&quot;); buttonGenerateReport.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { generateReport(); } }); panel.add(buttonGenerateReport); JButton buttonUpdateStudent = new JButton(&quot;更新学生信息&quot;); buttonUpdateStudent.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { updateStudent(Integer.parseInt(textFieldStudentId.getText().trim()), textFieldName.getText().trim(), textFieldGender.getText().trim(), textFieldBirthdate.getText().trim()); } }); panel.add(buttonUpdateStudent); JButton buttonDeleteStudent = new JButton(&quot;删除学生信息&quot;); buttonDeleteStudent.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent evt) { deleteStudent(Integer.parseInt(textFieldStudentId.getText().trim())); } }); panel.add(buttonDeleteStudent); } 三、进行学生的增删改查：要对学生信息进行改动就需要先建立学生表 代码： 123456789101112131415161718192021222324252627create database Teaching1; #创建数据库create table Teaching1.Student #创建学生表( StudentId int not null primary key auto_increment, name char(4) not null, gender char(2) not null, birthdate char(12) not null, JAVA int default 0, math int default 0, pe int default 0);select * from teaching1.student;drop table teaching1.student;/*create table Teaching1.Grade #创建学生成绩表( StudentId int not null, JAVA int, math int, pe int, foreign key(StudentId) references Teaching1.Student(StudentId));*/drop table teaching1.grade;alter table teaching1.student change gender gender char(2);alter table teaching1.student alter column studentId set default 1; #将学号默认值改为自增alter table teaching1.student auto_increment = 0000000001; #将学号的初始值设为2116050201alter table teaching1.student modify column studentId int;select * from teaching1.grade 接下来就需要用Java代码实现对学生信息的增删改查且能在数据库中表现出来 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125public void addStudent(String name, String gender, String birthdate) { try { // 利用sql语句实现学生添加 String sql = &quot;INSERT INTO student (name, gender, birthdate) VALUES (?, ?, ?)&quot;; // 执行sql语句，并获取主键的值 PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); // 1，2，3对应问号从左到右的位置 statement.setString(1, name); statement.setString(2, gender); statement.setString(3, birthdate); statement.executeUpdate(); ResultSet generatedKeys = statement.getGeneratedKeys(); // 查看是否有下一行 if (generatedKeys.next()) { // 将数据库的元组的第一列的值赋给studentId int studentId = generatedKeys.getInt(1); textAreaResult.append(&quot;学生插入成功，学号为： &quot; + studentId + &quot;\\n&quot;); } } catch (SQLException e) { e.printStackTrace(); } } public void addStudentGrade(int studentId, String course, int grade) { try { String sql = &quot;UPDATE student SET &quot; + course + &quot; = ? WHERE studentid = ?&quot;; PreparedStatement statement = connection.prepareStatement(sql); statement.setInt(1, grade); statement.setInt(2, studentId); statement.executeUpdate(); textAreaResult.append(&quot;学生成绩添加成功\\n&quot;); } catch (SQLException e) { e.printStackTrace(); textAreaResult.append(&quot;输入成绩有问题\\n&quot;); } } public void searchStudentById(int studentId) { try { String sql = &quot;SELECT * FROM student WHERE studentid = ?&quot;; PreparedStatement statement = connection.prepareStatement(sql); statement.setInt(1, studentId); ResultSet resultSet = statement.executeQuery(); if (resultSet.next()) { String name = resultSet.getString(&quot;name&quot;); int javagrade = resultSet.getInt(&quot;java&quot;); int mathgrade = resultSet.getInt(&quot;math&quot;); int pegrade = resultSet.getInt(&quot;pe&quot;); textAreaResult.append(&quot;学号： &quot; + studentId + &quot; 姓名： &quot; + name + &quot;, Java成绩 &quot; + javagrade + &quot;, 数学成绩： &quot; + mathgrade + &quot;, 体育成绩： &quot; + pegrade + &quot;\\n&quot;); } else { textAreaResult.append(&quot;学生不存在\\n&quot;); } } catch (SQLException e) { e.printStackTrace(); } } public void searchStudentByName(String name) { try { String sql = &quot;SELECT * FROM student WHERE name LIKE ?&quot;; PreparedStatement statement = connection.prepareStatement(sql); statement.setString(1, &quot;%&quot; + name + &quot;%&quot;); ResultSet resultSet = statement.executeQuery(); boolean found = false; while (resultSet.next()) { int studentId = resultSet.getInt(&quot;studentid&quot;); String name1 = resultSet.getString(&quot;name&quot;); int javagrade = resultSet.getInt(&quot;java&quot;); int mathgrade = resultSet.getInt(&quot;math&quot;); int pegrade = resultSet.getInt(&quot;pe&quot;); textAreaResult.append(&quot;学号： &quot; + studentId + &quot; 姓名： &quot; + name1 + &quot;, Java成绩 &quot; + javagrade + &quot;, 数学成绩： &quot; + mathgrade + &quot;, 体育成绩： &quot; + pegrade + &quot;\\n&quot;); found = true; } if (!found) { textAreaResult.append(&quot;学生不存在&quot;); } } catch (SQLException e) { e.printStackTrace(); } } public void updateStudent(int studentId, String name, String gender, String birthdate) { String sql = &quot;UPDATE student SET name = ?, gender = ?, birthdate = ? WHERE studentId = ?&quot;; try (PreparedStatement statement = connection.prepareStatement(sql)) { statement.setString(1, name); statement.setString(2, gender); statement.setString(3, birthdate); statement.setInt(4, studentId); int rowsUpdated = statement.executeUpdate(); if (rowsUpdated &gt; 0) { textAreaResult.append(&quot;学生信息修改成功\\n&quot;); } else { textAreaResult.append(&quot;学生不存在\\n&quot;); } } catch (SQLException e) { e.printStackTrace(); } } public void deleteStudent(int studentId) { String sql = &quot;DELETE FROM student WHERE studentId = ?&quot;; try (PreparedStatement statement = connection.prepareStatement(sql)) { statement.setInt(1, studentId); int rowsDeleted = statement.executeUpdate(); if (rowsDeleted &gt; 0) { textAreaResult.append(&quot;删除学生信息成功\\n&quot;); } else { textAreaResult.append(&quot;学生不存在\\n&quot;); } } catch (SQLException e) { e.printStackTrace(); } } 四、对学生成绩求平均值并利用POI技术实现对Excel文件的导入：这部分最为麻烦，想要使用POI技术，就需要导入相应的jar包，但是在官网下载的压缩包中怎么也无法找到jar包。后来发现可以直接利用Maven导入依赖，十分方便。于是我们决定使用Maven建立项目，但是一开始我们在网上查阅了大量的文章后依旧毫无头绪，好在随后在油管上发现了一个非常详细的教程，我们跟着教程一步一步走，虽然在最后报出了几个警告，但好在成功了且目前未发现对使用有什么影响。导入依赖后，接下来就是代码实现过程，对于从未接触过的技术，我们也只能通过查阅资料来自学，不过我们在CSDN上找到了一篇非常好的文章，我们按照其中的代码不断尝试，依葫芦画瓢最终总算实现了对Excel文件的导入，由于时间关系以及技术水平不足 （主要就是技术水平不足），我们尝试实现排序功能，但随后发现需要按照班级来排序，但是我们在最开始建表的时候就未考虑班级这个因素，随后只能放弃排序功能。 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// 计算学生的成绩平均值并添加到excel文件中 public void generateReport() { try { String sql = &quot;SELECT studentid, name, math, java, pe FROM student&quot;; Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(sql); // 创建工作簿和工作表 Workbook workbook = new XSSFWorkbook(); Sheet sheet = workbook.createSheet(&quot;学生学习情况报表&quot;); // 创建标题行 Row headerRow = sheet.createRow(0); headerRow.createCell(0).setCellValue(&quot;学号&quot;); headerRow.createCell(1).setCellValue(&quot;姓名&quot;); headerRow.createCell(2).setCellValue(&quot;数学成绩&quot;); headerRow.createCell(3).setCellValue(&quot;Java成绩&quot;); headerRow.createCell(4).setCellValue(&quot;体育成绩&quot;); headerRow.createCell(5).setCellValue(&quot;数学平均成绩&quot;); headerRow.createCell(6).setCellValue(&quot;Java平均成绩&quot;); headerRow.createCell(7).setCellValue(&quot;体育平均成绩&quot;); headerRow.createCell(8).setCellValue(&quot;总成绩&quot;); int rowIndex = 1; while (resultSet.next()) { int studentId = resultSet.getInt(&quot;studentid&quot;); String name = resultSet.getString(&quot;name&quot;); int mathGrade = resultSet.getInt(&quot;math&quot;); int javaGrade = resultSet.getInt(&quot;java&quot;); int peGrade = resultSet.getInt(&quot;pe&quot;); // 创建数据行 Row dataRow = sheet.createRow(rowIndex++); dataRow.createCell(0).setCellValue(studentId); dataRow.createCell(1).setCellValue(name); dataRow.createCell(2).setCellValue(mathGrade); dataRow.createCell(3).setCellValue(javaGrade); dataRow.createCell(4).setCellValue(peGrade); // 计算各科目班级平均值并填充 double mathClassAvg = calculateClassAverage(&quot;math&quot;); double javaClassAvg = calculateClassAverage(&quot;java&quot;); double peClassAvg = calculateClassAverage(&quot;pe&quot;); dataRow.createCell(5).setCellValue(mathClassAvg); dataRow.createCell(6).setCellValue(javaClassAvg); dataRow.createCell(7).setCellValue(peClassAvg); // 计算总成绩并填充 int totalGrade = mathGrade + javaGrade + peGrade; dataRow.createCell(8).setCellValue(totalGrade); } // 输出结果到图形界面 textAreaResult.append(&quot;学生学习情况报表生成成功\\n&quot;); // 保存到Excel文件 String filename = &quot;学生学习情况报表.xlsx&quot;; try { FileOutputStream fileOut = new FileOutputStream(filename); workbook.write(fileOut); textAreaResult.append(&quot;学生学习情况报表储存为：&quot; + filename + &quot;.\\n&quot;); workbook.close(); } catch (IOException e) { e.printStackTrace(); } } catch (SQLException e) { e.printStackTrace(); } } public double calculateClassAverage(String course) { double classAvg = 0.0; try { String sql = &quot;SELECT AVG(&quot; + course + &quot;) AS class_avg FROM student&quot;; Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(sql); if (resultSet.next()) { classAvg = resultSet.getDouble(&quot;class_avg&quot;); } } catch (SQLException e) { e.printStackTrace(); } return classAvg; } 五、随机实现生成100000个学生信息，成绩以80分为中心服从正态分布一开始我们对于如何随机生成学号以及姓名无从下手，后来通过查阅资料发现可以用两个数组来进行姓名的随机生成，而学号我们打算从第一名开始到最后一名学号从$1$开始依次增大，虽然我们知道最后学号变成$1000000$，但是我们也想不到该如何才能解决这个问题。在生成成绩时，我们查阅资料后发现可以用$σ * random.nextGaussian + μ$这个公式来生成符合条件的数。但是我们未知标准差，后来我们想到了 $3σ$ 原则，即 $P(μ - 3 * σ≤X≤μ + 3 * σ) ≈ 0.9973$。那么根据实际情况，我们将标准差设为6，也就是说成绩分布在$62-98$之间的概率非常大，而分布在这个范围之外的概率就非常小。商量后我们一致决定就这样实现 （虽然我们也不知道科不科学） 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// 生成100000个学生的数据，保证成绩以80分服从正态分布class StudentTestData { private static int studentId = 1; private static final int NUM_STUDENTS = 100000; private static final double MEAN_GRADE = 80.0; // 平均分 private static final double STANDARD_DEVIATION = 6.0; // 标准差 private static final String[] FIRST_NAMES = { &quot;John&quot;, &quot;Emma&quot;, &quot;Michael&quot;, &quot;Olivia&quot;, &quot;William&quot;, &quot;Ava&quot;, &quot;James&quot;, &quot;Sophia&quot;, &quot;Benjamin&quot;, &quot;Isabella&quot; }; private static final String[] LAST_NAMES = { &quot;Smith&quot;, &quot;Johnson&quot;, &quot;Williams&quot;, &quot;Jones&quot;, &quot;Brown&quot;, &quot;Davis&quot;, &quot;Miller&quot;, &quot;Wilson&quot;, &quot;Moore&quot;, &quot;Taylor&quot; }; public static void generateStudentData(String filename) { // 将数据写进文件中 try { FileWriter writer = new FileWriter(filename); Random random = new Random(); for (int i = 0; i &lt; NUM_STUDENTS; i++) { String name = generateRandomName(random); int studentId = generateRandomStudentId(); int mathGrade = generateRandomGrade(random); int javaGrade = generateRandomGrade(random); int peGrade = generateRandomGrade(random); String line = studentId + &quot;,&quot; + name + &quot;,&quot; + mathGrade + &quot;,&quot; + javaGrade + &quot;,&quot; + peGrade + &quot;\\n&quot;; writer.write(line); // writer.close(); } System.out.println(&quot;Student data generated successfully.&quot;); } catch (IOException e) { e.printStackTrace(); } } // 生成姓名，尽可能保持随机 private static String generateRandomName(Random random) { // 生成的两个姓名的随机数都在数组的长度范围内 String firstName = FIRST_NAMES[random.nextInt(FIRST_NAMES.length)]; String lastName = LAST_NAMES[random.nextInt(LAST_NAMES.length)]; return firstName + &quot; &quot; + lastName; } // 100000个学生，学号从1~100000 private static int generateRandomStudentId() { return studentId++; } private static int generateRandomGrade(Random random) { // 从随机数生成器中获取下一个伪高斯分布的均值为0.0，标准差为1.0的double类型的值 // 公式为Math.sqrt(σ) * random.nextGaussian + μ double grade = random.nextGaussian() * STANDARD_DEVIATION + MEAN_GRADE; // 将成绩限制在0到100之间 grade = Math.max(0, Math.min(100, grade)); // 将double类型四舍五入转换为int类型 return (int) Math.round(grade); }","link":"/2023/06/19/JAVA%E5%AE%9E%E9%AA%8C/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/06/19/hello-world/"}],"tags":[],"categories":[],"pages":[]}